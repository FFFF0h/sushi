#!/usr/bin/env python3.6

"""sushi-jsonrpc-bridge : JSONRPC backend for Sushi GUI

__copyright__   = "Copyright (C) 2017-2019 Modern Ancient Instruments Networked AB, dba Elk, Stockholm"
"""

import asyncio

import websockets
from jsonrpcserver import status
from jsonrpcserver.aio import methods
from jsonrpcserver.response import NotificationResponse
from jsonrpcserver.response import ErrorResponse
from jsonrpcserver.response import ExceptionResponse
from jsonrpcserver.exceptions import JsonRpcServerError

import grpc
import sushi_rpc_pb2
import sushi_rpc_pb2_grpc

#############################
#  Configuration Constants  #
#############################

DEFAULT_LISTENING_PORT = 19019
SUSHI_ADDRESS = ('localhost:51051')

##############################################################
#  Legacy functions, currently used by sushi gui that takes  #
#  strings as processor and parameter ids                    # 
##############################################################

@methods.add
async def set_parameter(context, plugin_id, param_name, param_value):
    print("\n\nSet parameter called on plugin %s, param %s, value: %s" % (plugin_id, param_name, param_value))
    try :
        context.stub.SetParameterValue(sushi_rpc_pb2.ParameterSetRequest( \
            parameter = sushi_rpc_pb2.ParameterIdentifier(processor_id = context.mapper.id_from_plugin(plugin_id), \
            parameter_id = context.mapper.id_from_parameter(plugin_id, param_name)) ,
            value = float(param_value)))

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def noteon_event(context, track_id, note_number, velocity):
    print("\n\nNoteON on track %s, note: %s, velocity: %s" % (track_id, note_number, velocity))
    try :
        context.stub.SendNoteOn(sushi_rpc_pb2.NoteOnRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = context.mapper.id_from_plugin(track_id)),
            note = note_number,
            channel = 0,
            velocity = velocity))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)

@methods.add
async def noteoff_event(context, track_id, note_number, velocity):
    print("\n\nNoteOFF on track %s, note: %s, velocity: %s" % (track_id, note_number, velocity))
    try :
        context.stub.SendNoteOff(sushi_rpc_pb2.NoteOffRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = context.mapper.id_from_plugin(track_id)),
            note = note_number,
            channel = 0,
            velocity = velocity))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)

@methods.add
async def program_change_event(context, track_id, program_number):
    print("\n\nPC on track %s, program: %s" % (track_id, program_number))
    try:
        context.stub.SetProcessorProgram(sushi_rpc_pb2. ProcessorProgramSetRequest( \
            sushi_rpc_pb2.ProcessorIdentifier(id = context.mapper.id_from_plugin(track_id)),
            sushi_rpc_pb2.ProgramIdentifier(program = program_number)))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)

#####################################
#  Wrappers for Sushi RPC services  #
#####################################

@methods.add
async def GetSamplerate(context):
    try:
        response = context.stub.GetSamplerate(sushi_rpc_pb2.GenericVoidValue())
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetPlayingMode(context):
    try:
        response = context.stub.GetPlayingMode(sushi_rpc_pb2.GenericVoidValue())
        return strip_grpc_enum(str(response))

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetPlayingMode(context, mode):
    try:
        context.stub.SetPlayingMode(sushi_rpc_pb2.PlayingMode(mode = mode))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetSyncMode(context):
    try:
        response = context.stub.GetSyncMode(sushi_rpc_pb2.GenericVoidValue())
        return strip_grpc_enum(str(response))

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetSyncMode(context, mode):
    try:
        context.stub.SetSyncMode(sushi_rpc_pb2.SyncMode(mode = mode))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTempo(context):
    try:
        response = context.stub.GetTempo(sushi_rpc_pb2.GenericVoidValue())
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetTempo(context, tempo):
    try:
        context.stub.SetTempo(sushi_rpc_pb2.GenericFloatValue(value = tempo))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTimeSignature(context):
    try:
        response = context.stub.GetTimeSignature(sushi_rpc_pb2.GenericVoidValue())
        return {"numerator" : response.numerator, "denominator" : response.denomainator}

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetTimeSignature(context, signature):
    try:
        context.stub.SetTimeSignature(sushi_rpc_pb2.TimeSignature(\
            numerator = signature["numerator"], \
            denomainator = signature["denominator"]))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTracks(context):
    try:
        response = context.stub.GetTracks(sushi_rpc_pb2.GenericVoidValue())
        return [format_trackinfo(track) for track in response.tracks]

    except grpc.RpcError as e:
        return grpc_error_format(e)


### Keyboard Control Functions
@methods.add
async def SendNoteOn(context, track_id, note, channel, velocity):
    try:
        context.stub.SendNoteOn(sushi_rpc_pb2.NoteOnRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = track_id),
            note = note,
            channel = channel,
            velocity = velocity))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SendNoteOff(context, track_id, note, channel, velocity):
    try:
        context.stub.SendNoteOff(sushi_rpc_pb2.NoteOffRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = track_id),
            note = note,
            channel = channel,
            velocity = velocity))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SendNoteAftertouch(context, track_id, note, channel, value):
    try:
        context.stub.SendNoteAftertouch(sushi_rpc_pb2.NoteAftertouchRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = track_id),
            note = note,
            channel = channel,
            value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SendAftertouch(context, track_id, channel, value):
    try:
        context.stub.SendAftertouch(sushi_rpc_pb2.NoteModulationRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = track_id),
            channel = channel,
            value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SendPitchBend(context, track_id, channel, value):
    try:
        context.stub.SendPitchBend(sushi_rpc_pb2.NoteModulationRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = track_id),
            channel = channel,
            value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SendModulation(context, track_id, channel, value):
    try:
        context.stub.SendModulation(sushi_rpc_pb2.NoteModulationRequest( \
            track = sushi_rpc_pb2.TrackIdentifier(id = track_id),
            channel = channel,
            value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


######################
# Cpu timing control #
######################
@methods.add
async def GetEngineTimings(context):
    try:
        response = context.stub.GetEngineTimings(sushi_rpc_pb2.GenericVoidValue())
        return format_cputimings(response)

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTrackTimings(context, track_id):
    try:
        response = context.stub.GetTrackTimings(sushi_rpc_pb2.TrackIdentifier(id = track_id))
        return format_cputimings(response)

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorTimings(context, processor_id):
    try:
        response = context.stub.GetProcessorTimings(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return format_cputimings(response)

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def ResetAllTimings(context):
    try:
        context.stub.ResetAllTimings(sushi_rpc_pb2.GenericVoidValue())
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def ResetTrackTimings(context, track_id):
    try:
        context.stub.ResetTrackTimings(sushi_rpc_pb2.TrackIdentifier(id = track_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def ResetProcessorTimings(context, processor_id):
    try:
        context.stub.ResetProcessorTimings(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


##################
# Track Controls #
##################
@methods.add
async def GetTrackId(context, track_name):
    try:
        response = context.stub.GetTrackId(sushi_rpc_pb2.GenericStringValue(value = track_name))
        return response.id

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTrackInfo(context, track_id):
    try:
        response = context.stub.GetTrackInfo(sushi_rpc_pb2.TrackIdentifier(id = track_id))
        return format_trackinfo(response)

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTrackProcessors(context, track_id):
    try:
        response = context.stub.GetTrackProcessors(sushi_rpc_pb2.TrackIdentifier(id = track_id))
        return [format_processorinfo(p) for p in response.processors]

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetTrackParameters(context, track_id):
    try:
        response = context.stub.GetTrackParameters(sushi_rpc_pb2.TrackIdentifier(id = track_id))
        return [format_parameterinfo(p) for p in response.parameters]

    except grpc.RpcError as e:
        return grpc_error_format(e)

######################
# Processor Controls #
######################

@methods.add
async def GetProcessorId(context, processor_name):
    try:
        response = context.stub.GetProcessorId(sushi_rpc_pb2.GenericStringValue(value = processor_name))
        return response.id

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorInfo(context, processor_id):
    try:
        response = context.stub.GetProcessorInfo(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return format_processorinfo(response)

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorBypassState(context, processor_id):
    try:
        response = context.stub.GetProcessorBypassState(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetProcessorBypassState(context, processor_id, value):
    try:
        context.stub.SetProcessorBypassState(sushi_rpc_pb2.ProcessorBypassStateSetRequest( \
            processor = sushi_rpc_pb2.ProcessorIdentifier(id = processor_id), \
            value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorCurrentProgram(context, processor_id):
    try:
        response = context.stub.GetProcessorCurrentProgram(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return response.program

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorCurrentProgramName(context, processor_id):
    try:
        response = context.stub.GetProcessorCurrentProgramName(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorProgramName(context, processor_id, program):
    try:
        response = context.stub.GetProcessorId(sushi_rpc_pb2.ProcessorProgramIdentifier( \
            processor = sushi_rpc_pb2.ProcessorIdentifier(id = processor_id), 
            program = program))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorPrograms(context, processor_id):
    try:
        response = context.stub.GetProcessorPrograms(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return [format_programinfo(program) for program in response.programs]

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetProcessorProgram(context, processor_id, program):
    try:
        context.stub.SetProcessorProgram(sushi_rpc_pb2. ProcessorProgramSetRequest( \
            processor = sushi_rpc_pb2.ProcessorIdentifier(id = processor_id),
            program = sushi_rpc_pb2.ProgramIdentifier(program = program)))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetProcessorParameters(context, processor_id):
    try:
        response = context.stub.GetProcessorParameters(sushi_rpc_pb2.ProcessorIdentifier(id = processor_id))
        return [format_parameterinfo(p) for p in response.parameters]

    except grpc.RpcError as e:
        return grpc_error_format(e)


##############################
# Parameter Control Services #
##############################
@methods.add
async def GetParameterId(context, processor_id, parameter_name):
    try:
        response = context.stub.GetParameterId(sushi_rpc_pb2.ParameterIdRequest( \
            processor = sushi_rpc_pb2.ProcessorIdentifier(id = processor_id), 
            ParameterName = parameter_name))
        return response.parameter_id

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetParameterInfo(context, processor_id, parameter_id):
    try:
        response = context.stub.GetParameterInfo(sushi_rpc_pb2.ParameterIdentifier( \
            processor_id = processor_id, parameter_id = parameter_id))
        return format_parameterinfo(response)

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetParameterValue(context, processor_id, parameter_id):
    try:
        response = context.stub.GetParameterValue(sushi_rpc_pb2.ParameterIdentifier( \
            processor_id = processor_id, parameter_id = parameter_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetParameterValue(context, processor_id, parameter_id):
    try:
        response = context.stub.GetParameterValue(sushi_rpc_pb2.ParameterIdentifier( \
            processor_id = processor_id, parameter_id = parameter_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetParameterValueAsString(context, processor_id, parameter_id):
    try:
        response = context.stub.GetParameterValueAsString(sushi_rpc_pb2.ParameterIdentifier( \
            processor_id = processor_id, parameter_id = parameter_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def GetStringPropertyValue(context, processor_id, property_id):
    try:
        response = context.stub.GetStringPropertyValue(sushi_rpc_pb2.ParameterIdentifier( \
            processor_id = processor_id, parameter_id = property_id))
        return response.value

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetParameterValue(context, processor_id, parameter_id, value):
    try:
        context.stub.SetParameterValue(sushi_rpc_pb2.ParameterSetRequest( \
            parameter = sushi_rpc_pb2.ParameterIdentifier(processor_id = processor_id, \
                                                          parameter_id = parameter_id), value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetParameterValueInDomain(context, processor_id, parameter_id, value):
    try:
        context.stub.SetParameterValue(sushi_rpc_pb2.ParameterSetRequest( \
            parameter = sushi_rpc_pb2.ParameterIdentifier(processor_id = processor_id, \
            parameter_id = parameter_id), value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


@methods.add
async def SetStringPropertyValue(context, processor_id, property_id, value):
    try:
        context.stub.SetStringPropertyValue(sushi_rpc_pb2.StringPropertySetRequest( \
            property = sushi_rpc_pb2.ParameterIdentifier(processor_id = processor_id, \
            parameter_id = property_id), value = value))
        return None

    except grpc.RpcError as e:
        return grpc_error_format(e)


########################
#  Formatting helpers  #
########################
def format_trackinfo(track):
    return {"id" : track.id,
            "label" : track.label,
            "name" : track.name,
            "input_channels" : track.input_channels,
            "input_busses" : track.input_busses,
            "output_channels" : track.output_channels,
            "output_busses" : track.output_busses,
            "processor_count" : track.processor_count }

def format_processorinfo(processor):
    return {"id" : processor.id,
            "label" : processor.label,
            "name" : processor.name,
            "parameter_count" : processor.parameter_count,
            "program_count" : processor.program_count }

def format_parameterinfo(parameter):
    return {"id" : parameter.id,
            "type" : strip_grpc_enum(str(parameter.type)),
            "label" : parameter.label,
            "name" : parameter.name,
            "unit" : parameter.unit,
            "automatable" : bool(parameter.automatable),
            "min_range" : parameter.min_range,
            "max_range" : parameter.max_range }

def format_cputimings(timing):
    return {"average" : timing.average,
            "min" : timing.min,
            "max" : timing.max }

def format_programinfo(program):
    return {"id" : program.id.program,
            "name" : program.name}



# Jsonrpcserver doesn't allow you to return errors directly
# So we raise out own exception, which will be handled by the lib
class SushiRpcError(JsonRpcServerError):
    def __init__(self, message):
        super(SushiRpcError, self).__init__(message)
        self.data = None
        self.code = -32000
        self.message = message
        self.http_status = status.HTTP_INTERNAL_ERROR


def grpc_error_format(e):
    raise SushiRpcError(str(e.code().name) + ", " + e.details())

def strip_grpc_enum(value):
    return value.split(':')[1].strip()

# Simple mapper with internal cache to map between processor/parameter ids and names
class IdMapper(object):
    def __init__(self, stub):
        self.stub = stub;
        self.plugins = {}

    def id_from_plugin(self, plugin_name):
        if plugin_name in self.plugins:
            return self.plugins[plugin_name]["id"]

        try:
            id = self.stub.GetProcessorId(sushi_rpc_pb2.GenericStringValue(value = plugin_name))
            self.plugins[plugin_name] = {"id": id.id, "params" : {}}
            return id.id

        except grpc.RpcError:
            print("Plugin " + plugin_name + " not found")
            return -1

    def id_from_parameter(self, plugin_name, parameter_name):
        if plugin_name in self.plugins:
            if parameter_name in self.plugins[plugin_name]["params"]:
                return self.plugins[plugin_name]["params"][parameter_name]

            try:
                plugin_id = self.id_from_plugin(plugin_name)
                param_id = self.stub.GetParameterId( \
                    sushi_rpc_pb2.ParameterIdRequest(processor = sushi_rpc_pb2.ProcessorIdentifier(id = plugin_id), \
                    ParameterName = parameter_name))
                self.plugins[plugin_name]["params"][parameter_name] = param_id.parameter_id
                return param_id.parameter_id

            except grpc.RpcError:
                return -1

        id = self.id_from_plugin(plugin_name)
        if (id >= 0):
            return self.id_from_parameter(plugin_name, parameter_name)

        return -1


class Context(object):
    def __init__(self, stub, mapper):
        self.stub = stub
        self.mapper = mapper

context = None

##########
#  Main  #
##########

async def main(websocket, path):
    global context
    if (not context):
        channel  = grpc.insecure_channel(SUSHI_ADDRESS)
        stub = sushi_rpc_pb2_grpc.SushiControllerStub(channel)
        mapper = IdMapper(stub)
        context = Context(stub, mapper)

    request = await websocket.recv()
    response = await methods.dispatch(request, context = context)
    if not response.is_notification:
        await websocket.send(str(response))

if __name__ == "__main__":
    start_server = websockets.serve(main, None, DEFAULT_LISTENING_PORT)
    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()

