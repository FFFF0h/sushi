/** gRPC definitions for external control of sushi
 *
 * @copyright 2018 - 2020 Modern Ancient Instruments Networked AB, dba Elk, Stockholm
 */

syntax = "proto3";

package sushi_rpc;

service SystemController
{
    rpc GetInterfaceVersion (GenericVoidValue) returns (GenericStringValue) {}
    rpc GetSushiVersion (GenericVoidValue) returns (GenericStringValue) {}
    rpc GetBuildInfo (GenericVoidValue) returns (SushiBuildInfo) {}

    rpc GetInputAudioChannelCount (GenericVoidValue) returns (GenericIntValue) {}
    rpc GetOutputAudioChannelCount (GenericVoidValue) returns (GenericIntValue) {}
}

service TransportController
{
    rpc GetSamplerate (GenericVoidValue) returns (GenericFloatValue) {}
    rpc GetPlayingMode (GenericVoidValue) returns (PlayingMode) {}
    rpc GetSyncMode (GenericVoidValue) returns (SyncMode) {}
    rpc GetTimeSignature (GenericVoidValue) returns (TimeSignature) {}
    rpc GetTempo (GenericVoidValue) returns (GenericFloatValue) {}

    rpc SetTempo (GenericFloatValue) returns (GenericVoidValue) {}
    rpc SetPlayingMode (PlayingMode) returns (GenericVoidValue) {}
    rpc SetSyncMode (SyncMode) returns (GenericVoidValue) {}
    rpc SetTimeSignature (TimeSignature) returns (GenericVoidValue) {}
}

service TimingController
{
    rpc GetEngineTimings (GenericVoidValue) returns (CpuTimings) {}
    rpc GetTrackTimings (TrackIdentifier) returns (CpuTimings) {}
    rpc GetProcessorTimings (ProcessorIdentifier) returns (CpuTimings) {}

    rpc ResetAllTimings (GenericVoidValue) returns (GenericVoidValue) {}
    rpc ResetTrackTimings (TrackIdentifier) returns (GenericVoidValue) {}
    rpc ResetProcessorTimings (ProcessorIdentifier) returns (GenericVoidValue) {}
}

service KeyboardController
{
    rpc SendNoteOn (NoteOnRequest) returns (GenericVoidValue) {}
    rpc SendNoteOff (NoteOffRequest) returns (GenericVoidValue) {}
    rpc SendNoteAftertouch (NoteAftertouchRequest) returns (GenericVoidValue) {}
    rpc SendAftertouch (NoteModulationRequest) returns (GenericVoidValue) {}
    rpc SendPitchBend (NoteModulationRequest) returns (GenericVoidValue) {}
    rpc SendModulation (NoteModulationRequest) returns (GenericVoidValue) {}
}

service AudioGraphController
{
    rpc GetAllProcessors (GenericVoidValue) returns (ProcessorInfoList) {}
    rpc GetAllTracks(GenericVoidValue) returns (TrackInfoList) {}
    rpc GetTrackId (GenericStringValue) returns (TrackIdentifier) {}
    rpc GetTrackInfo (TrackIdentifier) returns (TrackInfo) {}
    rpc GetTrackProcessors (TrackIdentifier) returns (ProcessorInfoList) {}
    rpc GetProcessorId (GenericStringValue) returns (ProcessorIdentifier) {}
    rpc GetProcessorInfo (ProcessorIdentifier) returns (ProcessorInfo) {}
    rpc GetProcessorBypassState (ProcessorIdentifier) returns (GenericBoolValue) {}

    rpc SetProcessorBypassState (ProcessorBypassStateSetRequest) returns (GenericVoidValue) {}

    rpc CreateTrack(CreateTrackRequest) returns (GenericVoidValue) {}
    rpc CreateMultibusTrack(CreateMultibusTrackRequest) returns (GenericVoidValue) {}
    rpc CreateProcessorOnTrack(CreateProcessorRequest) returns (GenericVoidValue) {}
    rpc MoveProcessorOnTrack(MoveProcessorRequest) returns (GenericVoidValue) {}

    rpc DeleteProcessorFromTrack(DeleteProcessorRequest) returns (GenericVoidValue) {}
    rpc DeleteTrack(TrackIdentifier) returns (GenericVoidValue) {}
}

service ProgramController
{
    rpc GetProcessorCurrentProgram (ProcessorIdentifier) returns (ProgramIdentifier) {}
    rpc GetProcessorCurrentProgramName (ProcessorIdentifier) returns (GenericStringValue) {}
    rpc GetProcessorProgramName (ProcessorProgramIdentifier) returns (GenericStringValue) {}
    rpc GetProcessorPrograms (ProcessorIdentifier) returns (ProgramInfoList) {}

    rpc SetProcessorProgram (ProcessorProgramSetRequest) returns (GenericVoidValue) {}
}

service ParameterController
{
    rpc GetTrackParameters (TrackIdentifier) returns (ParameterInfoList) {}
    rpc GetProcessorParameters (ProcessorIdentifier) returns (ParameterInfoList) {}
    rpc GetParameterId (ParameterIdRequest) returns (ParameterIdentifier) {}
    rpc GetParameterInfo (ParameterIdentifier) returns (ParameterInfo) {}
    rpc GetParameterValue (ParameterIdentifier) returns (GenericFloatValue) {}
    rpc GetParameterValueInDomain (ParameterIdentifier) returns (GenericFloatValue) {}
    rpc GetParameterValueAsString (ParameterIdentifier) returns (GenericStringValue) {}

    rpc SetParameterValue (ParameterValue) returns (GenericVoidValue) {}
}

service MidiController
{
    rpc GetInputPorts (GenericVoidValue) returns (GenericIntValue) {}
    rpc GetOutputPorts (GenericVoidValue) returns (GenericIntValue) {}

    rpc GetAllKeyboardInputConnections (GenericVoidValue) returns (MidiKeyboardConnectionList) {}
    rpc GetAllKeyboardOutputConnections (GenericVoidValue) returns (MidiKeyboardConnectionList) {}
    rpc GetAllControlChangeInputConnections (GenericVoidValue) returns (MidiControlChangeConnectionList) {}
    rpc GetAllProgramChangeInputConnections (GenericVoidValue) returns (MidiProgramChangeConnectionList) {}
    rpc GetControlChangeInputConnectionsForProcessor (ProcessorIdentifier) returns (MidiControlChangeConnectionList) {}
    rpc GetProgramChangeInputConnectionsForProcessor (ProcessorIdentifier) returns (MidiProgramChangeConnectionList) {}

    rpc ConnectKeyboardInputToTrack (MidiKeyboardConnection) returns (GenericVoidValue) {}
    rpc ConnectKeyboardOutputFromTrack (MidiKeyboardConnection) returns (GenericVoidValue) {}
    rpc ConnectControlChangeToProcessorParameter (MidiControlChangeConnection) returns (GenericVoidValue) {}
    rpc ConnectProgramChangeToProcessor (MidiProgramChangeConnection) returns (GenericVoidValue) {}

    rpc DisconnectKeyboardInput (MidiKeyboardConnection) returns (GenericVoidValue) {}
    rpc DisconnectKeyboardOutput (MidiKeyboardConnection) returns (GenericVoidValue) {}
    rpc DisconnectControlChange (MidiControlChangeConnection) returns (GenericVoidValue) {}
    rpc DisconnectProgramChange (MidiProgramChangeConnection) returns (GenericVoidValue) {}
    rpc DisconnectAllControlChangeForProcessor (ProcessorIdentifier) returns (GenericVoidValue) {}
    rpc DisconnectAllProgramChangeForProcessor (ProcessorIdentifier) returns (GenericVoidValue) {}
}

service AudioRoutingController
{
    rpc GetAllInputConnections (GenericVoidValue) returns (AudioTrackConnectionList) {}
    rpc GetAllOutputConnections (GenericVoidValue) returns (AudioTrackConnectionList) {}
    rpc GetInputConnectionsForTrack (GenericVoidValue) returns (AudioTrackConnectionList) {}
    rpc GetOutputConnectionsForTrack (GenericVoidValue) returns (AudioTrackConnectionList) {}

    rpc ConnectInputChannelToTrack (AudioTrackConnection) returns (GenericVoidValue) {}
    rpc ConnectOutputChannelFromTrack (AudioTrackConnection) returns (GenericVoidValue) {}

    rpc DisconnectInput (AudioTrackConnection) returns (GenericVoidValue) {}
    rpc DisconnectOutput (AudioTrackConnection) returns (GenericVoidValue) {}
    rpc DisconnectAllInputsFromTrack (TrackIdentifier) returns (GenericVoidValue) {}
    rpc DisconnectAllOutputFromTrack (TrackIdentifier) returns (GenericVoidValue) {}
}

service CvGateRoutingController
{
    rpc GetCvInputChannelCount (GenericVoidValue) returns (GenericIntValue) {}
    rpc GetCvOutputChannelCount (GenericVoidValue) returns (GenericIntValue) {}

    rpc GetAllCvInputConnections (GenericVoidValue) returns (CvParameterConnectionList) {}
    rpc GetAllCvOutputConnections (GenericVoidValue) returns (CvParameterConnectionList) {}
    rpc GetAllGateInputConnections (GenericVoidValue) returns  (GateProcessorConnectionList) {}
    rpc GetAllGateOutputConnections (GenericVoidValue) returns (GateProcessorConnectionList) {}
    rpc GetCvInputConnectionsForProcessor (ProcessorIdentifier) returns (CvParameterConnectionList) {}
    rpc GetCvOutputConnectionsForProcessor (ProcessorIdentifier) returns (CvParameterConnectionList) {}
    rpc GetGateInputConnectionsForProcessor (ProcessorIdentifier) returns (GateProcessorConnectionList) {}
    rpc GetGateOutputConnectionsForProcessor (ProcessorIdentifier) returns (GateProcessorConnectionList) {}

    rpc ConnectCvInputToParameter (CvParameterConnection) returns (GenericVoidValue) {}
    rpc ConnectCvOutputFromParameter (CvParameterConnection) returns (GenericVoidValue) {}
    rpc ConnectGateInputToProcessor (GateProcessorConnection) returns (GenericVoidValue) {}
    rpc ConnectGateOutputFromProcessor (GateProcessorConnection) returns (GenericVoidValue) {}

    rpc DisconnectCvInput (CvParameterConnection) returns (GenericVoidValue) {}
    rpc DisconnectCvOutput (CvParameterConnection) returns (GenericVoidValue) {}
    rpc DisconnectGateInput (GateProcessorConnection) returns (GenericVoidValue) {}
    rpc DisconnectGateOutput (GateProcessorConnection) returns (GenericVoidValue) {}
    rpc DisconnectAllCvInputsOnProcessor (ProcessorIdentifier) returns (GenericVoidValue) {}
    rpc DisconnectAllCvOutputsOnProcessor (ProcessorIdentifier) returns (GenericVoidValue) {}
    rpc DisconnectAllGateInputsOnProcessor (ProcessorIdentifier) returns (GenericVoidValue) {}
    rpc DisconnectAllGateOutputsOnProcessor (ProcessorIdentifier) returns (GenericVoidValue) {}
}

service OscController
{
    rpc GetSendPort (GenericVoidValue) returns (GenericIntValue) {}
    rpc GetReceivePort (GenericVoidValue) returns (GenericIntValue) {}
    rpc GetEnabledParameterOutputs (GenericVoidValue) returns (OscParameterOutputList) {}
    rpc EnableOutputForParameter (ParameterIdentifier) returns (GenericVoidValue) {}
    rpc DisableOutputForParameter (ParameterIdentifier) returns (GenericVoidValue) {}
}

service NotificationController
{
    rpc SubscribeToTransportChanges() returns (stream TransportUpdate) {}
    rpc SubscribeToTimingUpdates() returns (stream CpuTimings) {}
    rpc SubscribeToTrackChanges() returns (stream TrackUpdate) {}
    rpc SubscribeToProcessorChanges() returns (stream ProcessorUpdate) {}
    rpc SubscribeToParameterUpdates(ParameterNotificationRequest) returns (stream ParameterValue) {}
    rpc SubscribeToParameterStringUpdates(ParameterNotificationRequest) returns (stream ParameterStringValue) {}
}

/**
 * Global wrappers for primitive types.
 *
 * gRPC requires the usage of custom messages as arguments/return types of services,
 * and it is good practice to define custom values for better future expansion of the
 * protocol.
 *
 * However, this leads to unnecessary bloat especially for cases where it's clear
 * that a primitive type is the best choice (e.g. GetNumSomething), so we define here
 * some common cases to all services.
 */

message GenericVoidValue {
}

message GenericFloatValue {
    float value = 1;
}

message GenericIntValue {
    int32 value = 1;
}

message GenericBoolValue {
    bool value = 1;
}

message GenericStringValue {
    string value = 1;
}

/* Common types */

message SushiBuildInfo
{
    string          version = 1;
    repeated string build_options = 2;
    int32           audio_buffer_size = 3;
    string          commit_hash = 4;
    string          build_date = 5;
}

message TrackIdentifier {
    int32 id = 1;
}

message ProcessorIdentifier {
    int32 id = 1;
}

message ParameterIdentifier {
    int32 processor_id = 1;
    int32 parameter_id = 2;
}

/* 0 is reserved for "not set" in protobuf, so we don't use it for a valid response */
message ParameterType {
    enum Type {
        DUMMY = 0;
        BOOL = 1;
        INT = 2;
        FLOAT = 3;
    }
    Type type = 1;
}

/* Messages */

message PlayingMode {
    enum Mode {
        DUMMY = 0;
        STOPPED = 1;
        PLAYING = 2;
        RECORDING = 3;
    }
    Mode mode = 1;
}

message SyncMode {
    enum Mode {
        DUMMY = 0;
        INTERNAL = 1;
        MIDI = 2;
        LINK = 3;
    }
    Mode mode = 1;
}

message TimeSignature {
    int32 numerator = 1;
    int32 denominator = 2;
}

message CpuTimings {
    float average = 1;
    float min = 2;
    float max = 3;
}

message NoteOnRequest {
    TrackIdentifier track = 1;
    int32 channel = 2;
    int32 note = 3;
    float velocity = 4;
}

message NoteOffRequest {
    TrackIdentifier track = 1;
    int32 channel = 2;
    int32 note = 3;
    float velocity = 4;
}

message NoteAftertouchRequest {
    TrackIdentifier track = 1;
    int32 channel = 2;
    int32 note = 3;
    float value = 4;
}

message NoteModulationRequest {
    TrackIdentifier track = 1;
    int32 channel = 2;
    float value = 3;
}

message TrackInfo {
    int32  id = 1;
    string label = 2;
    string name = 3;
    int32  input_channels = 4;
    int32  input_busses = 5;
    int32  output_channels = 6;
    int32  output_busses = 7;
    repeated ProcessorIdentifier processors = 8;
}

message TrackInfoList {
    repeated TrackInfo tracks = 1;
}

message ProcessorInfo {
    int32  id = 1;
    string label = 2;
    string name = 3;
    int32  parameter_count = 4;
    int32  program_count = 5;
}

message ProcessorInfoList {
    repeated ProcessorInfo processors = 1;
}

message ProgramIdentifier {
    int32 program = 1;
}

message ProcessorProgramIdentifier {
    ProcessorIdentifier processor = 1;
    int32 program = 2;
}

message ProgramInfo {
    ProgramIdentifier id = 1;
    string name = 2;
}

message ProgramInfoList {
    repeated ProgramInfo programs = 1;
}

message ProcessorProgramSetRequest {
    ProcessorIdentifier processor = 1;
    ProgramIdentifier program = 2;
}

message ProcessorBypassStateSetRequest {
    ProcessorIdentifier processor = 1;
    bool value = 2;
}

message ParameterInfo {
    int32  id = 1;
    ParameterType  type = 2;
    string label = 3;
    string name = 4;
    string unit = 5;
    bool   automatable = 6;
    float  min_domain_value = 7;
    float  max_domain_value = 8;
}

message ParameterInfoList {
    repeated ParameterInfo parameters = 1;
}

message ParameterIdRequest {
    ProcessorIdentifier processor  = 1;
    string ParameterName = 2;
}

message ParameterValue {
    ParameterIdentifier parameter = 1;
    float value = 2;
}

message ParameterStringValue {
    ParameterIdentifier property = 1;
    string value = 2;
}

message PluginType {
    enum Type {
        DUMMY = 0;
        INTERNAL = 1;
        VST2X = 2;
        VST3X = 3;
        LV2 = 4;
    }
    Type type = 1;
}

message ProcessorPosition {
    bool add_to_back = 1;
    ProcessorIdentifier before_processor = 2;
}

message CreateTrackRequest {
    string name = 1;
    int32  channels = 2;
}

message CreateMultibusTrackRequest {
    string name = 1;
    int32  output_busses = 2;
    int32  input_busses  = 3;
}

message CreateProcessorRequest {
    string name = 1;
    string uid = 2;
    string path = 3;
    PluginType type = 4;
    TrackIdentifier track = 5;
    ProcessorPosition position = 6;
}

message MoveProcessorRequest {
    ProcessorIdentifier processor = 1;
    TrackIdentifier     source_track = 2;
    TrackIdentifier     dest_track = 3;
    ProcessorPosition   position = 4;
}

message DeleteProcessorRequest{
    ProcessorIdentifier processor = 1;
    TrackIdentifier     track = 2;
}

message ParameterNotificationRequest {
    repeated ParameterIdentifier parameters = 1;
}

message MidiChannel {
    enum Channel {
        MIDI_CH_1 = 1;
        MIDI_CH_2 = 2;
        MIDI_CH_3 = 3;
        MIDI_CH_4 = 4;
        MIDI_CH_5 = 5;
        MIDI_CH_6 = 6;
        MIDI_CH_7 = 7;
        MIDI_CH_8 = 8;
        MIDI_CH_9 = 9;
        MIDI_CH_10 = 10;
        MIDI_CH_11 = 11;
        MIDI_CH_12 = 12;
        MIDI_CH_13 = 13;
        MIDI_CH_14 = 14;
        MIDI_CH_15 = 15;
        MIDI_CH_16 = 16;
        MIDI_CH_OMNI = 17;
    }
    Channel channel = 1;
}

message AudioTrackConnection
{
    TrackIdentifier    track = 1;
    int32              track_channel = 2;
    int32              engine_channel = 3;
}

message AudioTrackConnectionList
{
    repeated AudioTrackConnection connections = 1;
}

message CvParameterConnection
{
    ParameterIdentifier parameter = 1;
    int32               cv_port_id = 2;
}

message CvParameterConnectionList
{
    repeated CvParameterConnection connections = 1;
}

message GateProcessorConnection
{
    ProcessorIdentifier parameter = 1;
    int32               gate_port_id = 2;
    int32               channel = 3;
    int32               note_no = 4;
}

message GateProcessorConnectionList
{
    repeated GateProcessorConnection connections = 1;
}

message MidiKeyboardConnection
{
    TrackIdentifier     track = 1;
    MidiChannel         channel = 2;
    int32               port = 3;
    bool                raw_midi = 7;
}

message MidiKeyboardConnectionList
{
    repeated MidiKeyboardConnection connections = 1;
}

message MidiControlChangeConnection
{
    ProcessorIdentifier processor = 1;
    MidiChannel         channel = 2;
    int32               port = 3;
    int32               cc_number = 4;
    int32               min_range = 5;
    int32               max_range = 6;
    bool                relative_mode = 7;
}

message MidiControlChangeConnectionList
{
    repeated MidiControlChangeConnection connections = 1;
}

message MidiProgramChangeConnection
{
    ProcessorIdentifier processor = 1;
    MidiChannel         channel = 2;
}

message MidiProgramChangeConnectionList
{
    repeated MidiProgramChangeConnection connections = 1;
}

message OscParameterOutputList
{
    repeated string path = 1;
}

message TransportUpdate
{
    any_of Transport
    {
        float           tempo = 1;
        PlayingMode     playing_mode = 2;
        SyncMode        sync_mode = 3;
        TimeSignature   time_signature = 4;
    }
}

message TrackUpdate
{
enum Action {
        TRACK_ADDED = 1;
        TRACK_DELETED = 2;
        PROCESSORS_CHANGED = 3;
    }
    Action      action = 1;
    TrackInfo   track = 2;
}

message ProcessorUpdate
{
enum Action {
        PROCESSOR_ADDED = 1;
        PROCESSOR_DELETED = 2;
        PROCESSOR_MOVED = 3;
    }
    Action         action = 1;
    ProcessorInfo  track = 2;
}