#include <fstream>

#include "gtest/gtest.h"
#include "library/parameter_dump.cpp"
#include "test_utils/parameter_dump_control_mockup.h"

TEST(ParameterDumpTest, TestParameterDump)
{
    const std::string expected_result = "{\n    \"plugins\": [\n        {\n            \"name\": \"proc 1\",\n            \"label\": \"proc 1\",\n            \"processor_id\": 0,\n            \"parent_track_id\": 0,\n            \"parameters\": [\n                {\n                    \"name\": \"param 1\",\n                    \"label\": \"param 1\",\n                    \"osc_path\": \"/parameter/proc_1/param_1\",\n                    \"id\": 0\n                },\n                {\n                    \"name\": \"param 2\",\n                    \"label\": \"param 2\",\n                    \"osc_path\": \"/parameter/proc_1/param_2\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"param 3\",\n                    \"label\": \"param 3\",\n                    \"osc_path\": \"/parameter/proc_1/param_3\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"proc 2\",\n            \"label\": \"proc 2\",\n            \"processor_id\": 1,\n            \"parent_track_id\": 0,\n            \"parameters\": [\n                {\n                    \"name\": \"param 1\",\n                    \"label\": \"param 1\",\n                    \"osc_path\": \"/parameter/proc_2/param_1\",\n                    \"id\": 0\n                },\n                {\n                    \"name\": \"param 2\",\n                    \"label\": \"param 2\",\n                    \"osc_path\": \"/parameter/proc_2/param_2\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"param 3\",\n                    \"label\": \"param 3\",\n                    \"osc_path\": \"/parameter/proc_2/param_3\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"proc 1\",\n            \"label\": \"proc 1\",\n            \"processor_id\": 0,\n            \"parent_track_id\": 1,\n            \"parameters\": [\n                {\n                    \"name\": \"param 1\",\n                    \"label\": \"param 1\",\n                    \"osc_path\": \"/parameter/proc_1/param_1\",\n                    \"id\": 0\n                },\n                {\n                    \"name\": \"param 2\",\n                    \"label\": \"param 2\",\n                    \"osc_path\": \"/parameter/proc_1/param_2\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"param 3\",\n                    \"label\": \"param 3\",\n                    \"osc_path\": \"/parameter/proc_1/param_3\",\n                    \"id\": 2\n                }\n            ]\n        },\n        {\n            \"name\": \"proc 2\",\n            \"label\": \"proc 2\",\n            \"processor_id\": 1,\n            \"parent_track_id\": 1,\n            \"parameters\": [\n                {\n                    \"name\": \"param 1\",\n                    \"label\": \"param 1\",\n                    \"osc_path\": \"/parameter/proc_2/param_1\",\n                    \"id\": 0\n                },\n                {\n                    \"name\": \"param 2\",\n                    \"label\": \"param 2\",\n                    \"osc_path\": \"/parameter/proc_2/param_2\",\n                    \"id\": 1\n                },\n                {\n                    \"name\": \"param 3\",\n                    \"label\": \"param 3\",\n                    \"osc_path\": \"/parameter/proc_2/param_3\",\n                    \"id\": 2\n                }\n            ]\n        }\n    ]\n}";
    std::string test_file_path = "/tmp/parameter_dump_test.json";
    sushi::ext::ControlMockup controller;

    ASSERT_EQ(sushi::dump_engine_processor_parameters(&controller, test_file_path),0);
    
    std::ifstream result_file(test_file_path);
    std::string result((std::istreambuf_iterator<char>(result_file)), std::istreambuf_iterator<char>());

    ASSERT_EQ(expected_result, result);
}